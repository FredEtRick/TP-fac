\hypertarget{_arbre_bin_8h}{\section{Référence du fichier C\+:/\+Users/\+Florian/\+Documents/\+T\+C\+C\+P/\+Arbre\+Bin.h}
\label{_arbre_bin_8h}\index{C\+:/\+Users/\+Florian/\+Documents/\+T\+C\+C\+P/\+Arbre\+Bin.\+h@{C\+:/\+Users/\+Florian/\+Documents/\+T\+C\+C\+P/\+Arbre\+Bin.\+h}}
}


En tete arbre binaire.  


{\ttfamily \#include $<$stdio.\+h$>$}\\*
{\ttfamily \#include $<$stdlib.\+h$>$}\\*
{\ttfamily \#include $<$string.\+h$>$}\\*
\subsection*{Structures de données}
\begin{DoxyCompactItemize}
\item 
struct \hyperlink{structnoeud}{noeud}
\begin{DoxyCompactList}\small\item\em Un noeud de l'arbre. \end{DoxyCompactList}\item 
struct \hyperlink{struct_arbre_bin}{Arbre\+Bin}
\begin{DoxyCompactList}\small\item\em L'arbre et ses informations. \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Énumérations}
\begin{DoxyCompactItemize}
\item 
enum \hyperlink{_arbre_bin_8h_a0bc6723d5d4776ab7cdc646728b775f7}{T\+Y\+P\+E} \{ \\*
{\bfseries F\+L\+O\+A\+T}, 
{\bfseries I\+N\+T}, 
{\bfseries C\+H\+A\+R}, 
{\bfseries S\+T\+R\+I\+N\+G}, 
\\*
{\bfseries O\+T\+H\+E\+R}
 \}
\begin{DoxyCompactList}\small\item\em Constantes definissant un type. \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Fonctions}
\begin{DoxyCompactItemize}
\item 
\hyperlink{structnoeud}{noeud} $\ast$ \hyperlink{_arbre_bin_8h_a9f1c8df1b9d13a670a378d6021d29670}{Noeud\+\_\+creer} (void $\ast$)
\begin{DoxyCompactList}\small\item\em Creation d'un noeud. \end{DoxyCompactList}\item 
\hyperlink{struct_arbre_bin}{Arbre\+Bin} $\ast$ \hyperlink{_arbre_bin_8h_a3b81ca2fea3a0020e8983c7091335007}{Arbre\+Bin\+\_\+creer} (\hyperlink{_arbre_bin_8h_a0bc6723d5d4776ab7cdc646728b775f7}{T\+Y\+P\+E}, void($\ast$aff)(void $\ast$), int($\ast$cmp)(void $\ast$, void $\ast$), void($\ast$suppr)(void $\ast$))
\begin{DoxyCompactList}\small\item\em Creation d'un arbre. \end{DoxyCompactList}\item 
void \hyperlink{_arbre_bin_8h_a0e9173da29dda5d45a557749a0085f37}{Noeud\+\_\+ajout} (\hyperlink{structnoeud}{noeud} $\ast$, void $\ast$)
\begin{DoxyCompactList}\small\item\em Ajout d'un noeud a l'arbre. \end{DoxyCompactList}\item 
void \hyperlink{_arbre_bin_8h_a072495deb7a19838e3fbcd35068e0722}{Arbre\+Bin\+\_\+ajouter} (\hyperlink{struct_arbre_bin}{Arbre\+Bin} $\ast$, void $\ast$)
\begin{DoxyCompactList}\small\item\em Ajout d'un noeud a l'arbre. \end{DoxyCompactList}\item 
void \hyperlink{_arbre_bin_8h_a5e4f911b96ed29e450b90320f766daea}{S\+Arbre\+Bin\+\_\+chaine} (\hyperlink{struct_arbre_bin}{Arbre\+Bin} $\ast$, \hyperlink{structnoeud}{noeud} $\ast$)
\begin{DoxyCompactList}\small\item\em Affichage de l'arbre. \end{DoxyCompactList}\item 
void \hyperlink{_arbre_bin_8h_a85bbb3b0739abfadcb47ffcd81bb0b18}{Arbre\+Bin\+\_\+chaine} (\hyperlink{struct_arbre_bin}{Arbre\+Bin} $\ast$)
\begin{DoxyCompactList}\small\item\em Affichage de l'arbre. \end{DoxyCompactList}\item 
void \hyperlink{_arbre_bin_8h_af2d9d87577218d7846320bd00b6c1c5c}{S\+Arbre\+Bin\+\_\+supprimer} (\hyperlink{struct_arbre_bin}{Arbre\+Bin} $\ast$, \hyperlink{structnoeud}{noeud} $\ast$)
\begin{DoxyCompactList}\small\item\em Suppression d'un noeud. \end{DoxyCompactList}\item 
void \hyperlink{_arbre_bin_8h_a1ec303b3c01f852a29b3bb6792591633}{Arbre\+Bin\+\_\+supprimer} (\hyperlink{struct_arbre_bin}{Arbre\+Bin} $\ast$)
\begin{DoxyCompactList}\small\item\em Suppression d'une arborescence. \end{DoxyCompactList}\item 
void \hyperlink{_arbre_bin_8h_a239655a279ccce9f346854a6d1354f0b}{S\+Arbre\+Bin\+\_\+clone} (\hyperlink{structnoeud}{noeud} $\ast$, \hyperlink{structnoeud}{noeud} $\ast$)
\begin{DoxyCompactList}\small\item\em Copie de noeud. \end{DoxyCompactList}\item 
\hyperlink{struct_arbre_bin}{Arbre\+Bin} $\ast$ \hyperlink{_arbre_bin_8h_a43df2b525ac0675d94fff0017dec9c47}{Arbre\+Bin\+\_\+clone} (\hyperlink{struct_arbre_bin}{Arbre\+Bin} $\ast$)
\begin{DoxyCompactList}\small\item\em Clone l'arbre. \end{DoxyCompactList}\item 
int \hyperlink{_arbre_bin_8h_a385f4faece3662bd69fd46f09fda6131}{S\+Arbre\+Bin\+\_\+compare} (\hyperlink{structnoeud}{noeud} $\ast$, \hyperlink{structnoeud}{noeud} $\ast$, \hyperlink{struct_arbre_bin}{Arbre\+Bin} $\ast$)
\begin{DoxyCompactList}\small\item\em Compare deux noeuds. \end{DoxyCompactList}\item 
int \hyperlink{_arbre_bin_8h_a9aff50f1390514affb39bbaee38e4f3e}{Arbre\+Bin\+\_\+compare} (\hyperlink{struct_arbre_bin}{Arbre\+Bin} $\ast$, \hyperlink{struct_arbre_bin}{Arbre\+Bin} $\ast$)
\begin{DoxyCompactList}\small\item\em Compare deux arbre. \end{DoxyCompactList}\end{DoxyCompactItemize}


\subsection{Description détaillée}
En tete arbre binaire. 

\begin{DoxyAuthor}{Auteur}
Ongaro.\+Y -\/ Lacombe.\+F 
\end{DoxyAuthor}
\begin{DoxyDate}{Date}
7 decembre 2014
\end{DoxyDate}
Definition des differentes structures representant l'arbre binaire 

\subsection{Documentation du type de l'énumération}
\hypertarget{_arbre_bin_8h_a0bc6723d5d4776ab7cdc646728b775f7}{\index{Arbre\+Bin.\+h@{Arbre\+Bin.\+h}!T\+Y\+P\+E@{T\+Y\+P\+E}}
\index{T\+Y\+P\+E@{T\+Y\+P\+E}!Arbre\+Bin.\+h@{Arbre\+Bin.\+h}}
\subsubsection[{T\+Y\+P\+E}]{\setlength{\rightskip}{0pt plus 5cm}enum {\bf T\+Y\+P\+E}}}\label{_arbre_bin_8h_a0bc6723d5d4776ab7cdc646728b775f7}


Constantes definissant un type. 

Cette enumeration permet de definir le type de donnees qui seront stockees dans l'arbre. 

\subsection{Documentation des fonctions}
\hypertarget{_arbre_bin_8h_a072495deb7a19838e3fbcd35068e0722}{\index{Arbre\+Bin.\+h@{Arbre\+Bin.\+h}!Arbre\+Bin\+\_\+ajouter@{Arbre\+Bin\+\_\+ajouter}}
\index{Arbre\+Bin\+\_\+ajouter@{Arbre\+Bin\+\_\+ajouter}!Arbre\+Bin.\+h@{Arbre\+Bin.\+h}}
\subsubsection[{Arbre\+Bin\+\_\+ajouter}]{\setlength{\rightskip}{0pt plus 5cm}void Arbre\+Bin\+\_\+ajouter (
\begin{DoxyParamCaption}
\item[{{\bf Arbre\+Bin} $\ast$}]{abr, }
\item[{void $\ast$}]{cle}
\end{DoxyParamCaption}
)}}\label{_arbre_bin_8h_a072495deb7a19838e3fbcd35068e0722}


Ajout d'un noeud a l'arbre. 


\begin{DoxyParams}{Paramètres}
{\em abr} & Arbre que l'on veut completer \\
\hline
{\em cle} & Pointeur generique vers la donnee de la cle. Fonction recursive qui ajoute un noeud dans l'arborescence et sa cle. \\
\hline
\end{DoxyParams}
\hypertarget{_arbre_bin_8h_a85bbb3b0739abfadcb47ffcd81bb0b18}{\index{Arbre\+Bin.\+h@{Arbre\+Bin.\+h}!Arbre\+Bin\+\_\+chaine@{Arbre\+Bin\+\_\+chaine}}
\index{Arbre\+Bin\+\_\+chaine@{Arbre\+Bin\+\_\+chaine}!Arbre\+Bin.\+h@{Arbre\+Bin.\+h}}
\subsubsection[{Arbre\+Bin\+\_\+chaine}]{\setlength{\rightskip}{0pt plus 5cm}void Arbre\+Bin\+\_\+chaine (
\begin{DoxyParamCaption}
\item[{{\bf Arbre\+Bin} $\ast$}]{n}
\end{DoxyParamCaption}
)}}\label{_arbre_bin_8h_a85bbb3b0739abfadcb47ffcd81bb0b18}


Affichage de l'arbre. 


\begin{DoxyParams}{Paramètres}
{\em n} & Noeud actuel dans l'arborescence.\\
\hline
\end{DoxyParams}
Fonction qui affiche l'arbre selon un parcours prefixe. \hypertarget{_arbre_bin_8h_a43df2b525ac0675d94fff0017dec9c47}{\index{Arbre\+Bin.\+h@{Arbre\+Bin.\+h}!Arbre\+Bin\+\_\+clone@{Arbre\+Bin\+\_\+clone}}
\index{Arbre\+Bin\+\_\+clone@{Arbre\+Bin\+\_\+clone}!Arbre\+Bin.\+h@{Arbre\+Bin.\+h}}
\subsubsection[{Arbre\+Bin\+\_\+clone}]{\setlength{\rightskip}{0pt plus 5cm}{\bf Arbre\+Bin}$\ast$ Arbre\+Bin\+\_\+clone (
\begin{DoxyParamCaption}
\item[{{\bf Arbre\+Bin} $\ast$}]{src}
\end{DoxyParamCaption}
)}}\label{_arbre_bin_8h_a43df2b525ac0675d94fff0017dec9c47}


Clone l'arbre. 


\begin{DoxyParams}{Paramètres}
{\em src} & L'arbre a copier. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Renvoie}
Pointeur vers l'instance de \hyperlink{struct_arbre_bin}{Arbre\+Bin} allouee dynamiquement.
\end{DoxyReturn}
La structure de l'arbre est copiee. Les cles sont seulement copiees par pointeur. Copie non profonde. \hypertarget{_arbre_bin_8h_a9aff50f1390514affb39bbaee38e4f3e}{\index{Arbre\+Bin.\+h@{Arbre\+Bin.\+h}!Arbre\+Bin\+\_\+compare@{Arbre\+Bin\+\_\+compare}}
\index{Arbre\+Bin\+\_\+compare@{Arbre\+Bin\+\_\+compare}!Arbre\+Bin.\+h@{Arbre\+Bin.\+h}}
\subsubsection[{Arbre\+Bin\+\_\+compare}]{\setlength{\rightskip}{0pt plus 5cm}int Arbre\+Bin\+\_\+compare (
\begin{DoxyParamCaption}
\item[{{\bf Arbre\+Bin} $\ast$}]{a1, }
\item[{{\bf Arbre\+Bin} $\ast$}]{a2}
\end{DoxyParamCaption}
)}}\label{_arbre_bin_8h_a9aff50f1390514affb39bbaee38e4f3e}


Compare deux arbre. 


\begin{DoxyParams}{Paramètres}
{\em a1} & Premier arbre a comparer. \\
\hline
{\em a2} & Second arbre a comparer. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Renvoie}
Entier egal a 0 si les arbres sont identique 
\end{DoxyReturn}
\hypertarget{_arbre_bin_8h_a3b81ca2fea3a0020e8983c7091335007}{\index{Arbre\+Bin.\+h@{Arbre\+Bin.\+h}!Arbre\+Bin\+\_\+creer@{Arbre\+Bin\+\_\+creer}}
\index{Arbre\+Bin\+\_\+creer@{Arbre\+Bin\+\_\+creer}!Arbre\+Bin.\+h@{Arbre\+Bin.\+h}}
\subsubsection[{Arbre\+Bin\+\_\+creer}]{\setlength{\rightskip}{0pt plus 5cm}{\bf Arbre\+Bin}$\ast$ Arbre\+Bin\+\_\+creer (
\begin{DoxyParamCaption}
\item[{{\bf T\+Y\+P\+E}}]{type, }
\item[{void($\ast$)(void $\ast$)}]{aff, }
\item[{int($\ast$)(void $\ast$, void $\ast$)}]{cmp, }
\item[{void($\ast$)(void $\ast$)}]{suppr}
\end{DoxyParamCaption}
)}}\label{_arbre_bin_8h_a3b81ca2fea3a0020e8983c7091335007}


Creation d'un arbre. 


\begin{DoxyParams}{Paramètres}
{\em type} & Valeur definissant le type de donnee pointee par toutes les cles. \\
\hline
{\em aff} & Pointeur vers une fonction d'affichage (peut etre facultatif). \\
\hline
{\em cmp} & Pointeur vers une fonction de comparaison (peut etre facultatif). \\
\hline
{\em suppr} & Pointeur vers une fonction de suppression (facultatif). \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Renvoie}
Pointeur vers l'instance de \hyperlink{struct_arbre_bin}{Arbre\+Bin} allouee dynamiquement. 
\end{DoxyReturn}
\hypertarget{_arbre_bin_8h_a1ec303b3c01f852a29b3bb6792591633}{\index{Arbre\+Bin.\+h@{Arbre\+Bin.\+h}!Arbre\+Bin\+\_\+supprimer@{Arbre\+Bin\+\_\+supprimer}}
\index{Arbre\+Bin\+\_\+supprimer@{Arbre\+Bin\+\_\+supprimer}!Arbre\+Bin.\+h@{Arbre\+Bin.\+h}}
\subsubsection[{Arbre\+Bin\+\_\+supprimer}]{\setlength{\rightskip}{0pt plus 5cm}void Arbre\+Bin\+\_\+supprimer (
\begin{DoxyParamCaption}
\item[{{\bf Arbre\+Bin} $\ast$}]{n}
\end{DoxyParamCaption}
)}}\label{_arbre_bin_8h_a1ec303b3c01f852a29b3bb6792591633}


Suppression d'une arborescence. 


\begin{DoxyParams}{Paramètres}
{\em n} & Pointeur vers un arbre binaire. Suppression d'une arborescence. Les donnees pointes par la clé ne sont supprimees que si une fonction de supression est specifiee. \\
\hline
\end{DoxyParams}
\hypertarget{_arbre_bin_8h_a0e9173da29dda5d45a557749a0085f37}{\index{Arbre\+Bin.\+h@{Arbre\+Bin.\+h}!Noeud\+\_\+ajout@{Noeud\+\_\+ajout}}
\index{Noeud\+\_\+ajout@{Noeud\+\_\+ajout}!Arbre\+Bin.\+h@{Arbre\+Bin.\+h}}
\subsubsection[{Noeud\+\_\+ajout}]{\setlength{\rightskip}{0pt plus 5cm}void Noeud\+\_\+ajout (
\begin{DoxyParamCaption}
\item[{{\bf noeud} $\ast$}]{n, }
\item[{void $\ast$}]{cle}
\end{DoxyParamCaption}
)}}\label{_arbre_bin_8h_a0e9173da29dda5d45a557749a0085f37}


Ajout d'un noeud a l'arbre. 


\begin{DoxyParams}{Paramètres}
{\em n} & Noeud actuel dans l'arborescence. \\
\hline
{\em cle} & Pointeur generique vers la donnee de la cle.\\
\hline
\end{DoxyParams}
Fonction recursive qui ajoute un noeud dans l'arborescence ainsi que sa cle. Si les deux fils ne sont pas nul, on choisit aleatoirement si l'on poursuit la recursion a gauche ou a droite. \hypertarget{_arbre_bin_8h_a9f1c8df1b9d13a670a378d6021d29670}{\index{Arbre\+Bin.\+h@{Arbre\+Bin.\+h}!Noeud\+\_\+creer@{Noeud\+\_\+creer}}
\index{Noeud\+\_\+creer@{Noeud\+\_\+creer}!Arbre\+Bin.\+h@{Arbre\+Bin.\+h}}
\subsubsection[{Noeud\+\_\+creer}]{\setlength{\rightskip}{0pt plus 5cm}{\bf noeud}$\ast$ Noeud\+\_\+creer (
\begin{DoxyParamCaption}
\item[{void $\ast$}]{c}
\end{DoxyParamCaption}
)}}\label{_arbre_bin_8h_a9f1c8df1b9d13a670a378d6021d29670}


Creation d'un noeud. 


\begin{DoxyParams}{Paramètres}
{\em c} & Pointeur generique \+: la cle du noeud. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Renvoie}
Pointeur vers l'instance de noeud allouee dynamiquement. 
\end{DoxyReturn}
\hypertarget{_arbre_bin_8h_a5e4f911b96ed29e450b90320f766daea}{\index{Arbre\+Bin.\+h@{Arbre\+Bin.\+h}!S\+Arbre\+Bin\+\_\+chaine@{S\+Arbre\+Bin\+\_\+chaine}}
\index{S\+Arbre\+Bin\+\_\+chaine@{S\+Arbre\+Bin\+\_\+chaine}!Arbre\+Bin.\+h@{Arbre\+Bin.\+h}}
\subsubsection[{S\+Arbre\+Bin\+\_\+chaine}]{\setlength{\rightskip}{0pt plus 5cm}void S\+Arbre\+Bin\+\_\+chaine (
\begin{DoxyParamCaption}
\item[{{\bf Arbre\+Bin} $\ast$}]{n, }
\item[{{\bf noeud} $\ast$}]{cur}
\end{DoxyParamCaption}
)}}\label{_arbre_bin_8h_a5e4f911b96ed29e450b90320f766daea}


Affichage de l'arbre. 


\begin{DoxyParams}{Paramètres}
{\em n} & Noeud actuel dans l'arborescence. \\
\hline
{\em cur} & Noeud actuel dans l'arborescence.\\
\hline
\end{DoxyParams}
Fonction qui affiche un noeud de l'arbre. \hypertarget{_arbre_bin_8h_a239655a279ccce9f346854a6d1354f0b}{\index{Arbre\+Bin.\+h@{Arbre\+Bin.\+h}!S\+Arbre\+Bin\+\_\+clone@{S\+Arbre\+Bin\+\_\+clone}}
\index{S\+Arbre\+Bin\+\_\+clone@{S\+Arbre\+Bin\+\_\+clone}!Arbre\+Bin.\+h@{Arbre\+Bin.\+h}}
\subsubsection[{S\+Arbre\+Bin\+\_\+clone}]{\setlength{\rightskip}{0pt plus 5cm}void S\+Arbre\+Bin\+\_\+clone (
\begin{DoxyParamCaption}
\item[{{\bf noeud} $\ast$}]{src, }
\item[{{\bf noeud} $\ast$}]{dest}
\end{DoxyParamCaption}
)}}\label{_arbre_bin_8h_a239655a279ccce9f346854a6d1354f0b}


Copie de noeud. 


\begin{DoxyParams}{Paramètres}
{\em src} & Un noeud dans l'arborescence source. \\
\hline
{\em dest} & Un noeud dans l'arborescence destinataire. Copie du noeud src de l'arborescence source dans le noeud dest de l'arborescence destinataire. \\
\hline
\end{DoxyParams}
\hypertarget{_arbre_bin_8h_a385f4faece3662bd69fd46f09fda6131}{\index{Arbre\+Bin.\+h@{Arbre\+Bin.\+h}!S\+Arbre\+Bin\+\_\+compare@{S\+Arbre\+Bin\+\_\+compare}}
\index{S\+Arbre\+Bin\+\_\+compare@{S\+Arbre\+Bin\+\_\+compare}!Arbre\+Bin.\+h@{Arbre\+Bin.\+h}}
\subsubsection[{S\+Arbre\+Bin\+\_\+compare}]{\setlength{\rightskip}{0pt plus 5cm}int S\+Arbre\+Bin\+\_\+compare (
\begin{DoxyParamCaption}
\item[{{\bf noeud} $\ast$}]{n1, }
\item[{{\bf noeud} $\ast$}]{n2, }
\item[{{\bf Arbre\+Bin} $\ast$}]{ctxt}
\end{DoxyParamCaption}
)}}\label{_arbre_bin_8h_a385f4faece3662bd69fd46f09fda6131}


Compare deux noeuds. 


\begin{DoxyParams}{Paramètres}
{\em n1} & Un noeud du premier arbre a comparer. \\
\hline
{\em n2} & Un noeud du second arbre a comparer. \\
\hline
{\em ctxt} & Pointeur vers le premeir arbre. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Renvoie}
Entier egal a 0 si chaque noeud est identique.
\end{DoxyReturn}
Compare deux noeuds. Cette fonction utilise la fonction de comparaison passée en parametre pour comparer les clés. \hypertarget{_arbre_bin_8h_af2d9d87577218d7846320bd00b6c1c5c}{\index{Arbre\+Bin.\+h@{Arbre\+Bin.\+h}!S\+Arbre\+Bin\+\_\+supprimer@{S\+Arbre\+Bin\+\_\+supprimer}}
\index{S\+Arbre\+Bin\+\_\+supprimer@{S\+Arbre\+Bin\+\_\+supprimer}!Arbre\+Bin.\+h@{Arbre\+Bin.\+h}}
\subsubsection[{S\+Arbre\+Bin\+\_\+supprimer}]{\setlength{\rightskip}{0pt plus 5cm}void S\+Arbre\+Bin\+\_\+supprimer (
\begin{DoxyParamCaption}
\item[{{\bf Arbre\+Bin} $\ast$}]{abr, }
\item[{{\bf noeud} $\ast$}]{cur}
\end{DoxyParamCaption}
)}}\label{_arbre_bin_8h_af2d9d87577218d7846320bd00b6c1c5c}


Suppression d'un noeud. 


\begin{DoxyParams}{Paramètres}
{\em cur} & Pointeur vers un noeud. \\
\hline
{\em abr} & Pointeur vers l'arbre a supprimer. \\
\hline
\end{DoxyParams}
